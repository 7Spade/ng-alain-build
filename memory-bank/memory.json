{"type":"entity","name":"Memory Bank Optimization System","entityType":"System","observations":["Hierarchical rule loading system for optimized token usage","Batch verification workflow using platform-specific commands","Progressive documentation approach for different complexity levels","Context preservation during mode transitions","Differential Memory Bank updates to minimize file operations","Template initialization with error handling","One-pass verification for directory structure","Platform adaptation with auto-detection and command optimization","Entity-relationship format in memory.json for knowledge graph","Structured directory system with active-context, system-patterns, creative-phase, implementation, archive","Mandatory workflow: READ memory.json → UPDATE context → REFERENCE patterns → RECORD decisions → FOLLOW standards → ARCHIVE work"]}
{"type":"entity","name":"ng-alain Project","entityType":"Project","observations":["Angular 20.3.0 + ng-alain 20.0.2 admin panel framework","ng-zorro-antd 20.3.1 UI component library","Windows PowerShell development environment","Yarn 4.9.2 package manager","High memory allocation build configuration (8GB)","ESLint + Stylelint + Prettier code quality tools","Jasmine + Karma + Protractor testing framework","ng-alain-plugin-theme for dynamic theming","Complete admin panel scaffold with authentication and authorization"]}
{"type":"entity","name":"VAN Mode System","entityType":"Mode","observations":["Initialization and entry point for Memory Bank system","Platform detection with Windows PowerShell adaptation","File verification with batch operations","Complexity determination for task classification","Level 1 Quick Bug Fix workflow support","Memory Bank structure creation and validation","Technical context documentation and preservation"]}
{"type":"entity","name":"VAN File Verification System","entityType":"Subsystem","observations":["Critical Memory Bank verification as first step","Batch directory creation with platform-specific commands","Template initialization with error handling","One-pass verification for directory structure","Platform adaptation with auto-detection","Memory Bank completeness validation","Essential file structure verification"]}
{"type":"entity","name":"VAN Platform Detection System","entityType":"Subsystem","observations":["Windows PowerShell environment detection","Path separator format confirmation (backslash)","Command adaptations for Windows platform","Platform-specific optimization for batch operations","Environment variable and shell detection","Working directory validation"]}
{"type":"entity","name":"VAN Complexity Determination System","entityType":"Subsystem","observations":["Task analysis for complexity level classification","Level 1 Quick Bug Fix identification","Scope assessment and risk evaluation","Time estimation and dependency mapping","Mode transition triggers for higher complexity levels","Decision tree workflow for complexity assessment"]}
{"type":"entity","name":"Angular Architecture Decisions","entityType":"Architecture","observations":["Standalone Components: 100% adoption removing NgModule complexity","Service-based State Management: Using Angular services with RxJS instead of NgRx","Hash Routing: Simplified deployment without server configuration","Lazy Loading Strategy: All feature modules use lazy loading for optimal bundle splitting","Functional Guards: Using CanActivateFn instead of class-based guards","Dependency Injection: Preferring inject() function over constructor DI","Change Detection: OnPush strategy enforced for optimal performance","Native Control Flow: Using @if, @for, @switch instead of structural directives","TypeScript Strict Mode: Maximum type safety enabled","Path Alias System: TypeScript path mapping for cleaner imports","Mock-First Development: Using @delon/mock for parallel development","URL as State: Leveraging router state for application state","Grid Layout: CSS Grid for responsive card-based layouts","Template Organization: Inline for <150 lines, external for complex components"]}
{"type":"entity","name":"ng-alain Development Patterns","entityType":"Pattern","observations":["ST (Simple Table): Data table with built-in features","SE (Search Engine): Advanced search and filtering","ACL Integration: Role-based access control","Theme Integration: Dynamic theming support","Schema-driven Forms: JSON schema form generation","Validation Patterns: Built-in and custom validators","Dynamic Forms: Runtime form generation","Form State Management: Reactive form patterns","Responsive Layout: Mobile-first design approach","Sidebar Navigation: Collapsible navigation","Breadcrumb Navigation: Hierarchical navigation","Header Actions: Toolbar and action buttons","@delon/theme _HttpClient: Unified error handling and loading states","Less Preprocessor: Seamless integration with ng-zorro-antd theming"]}
{"type":"entity","name":"ng-alain Code Standards","entityType":"Standard","observations":["Component Template Standards: Standalone components with inject() DI and OnPush strategy","Service Template Standards: providedIn root with _HttpClient and RESTful API conventions","Guard Template Standards: Functional guards with complete error handling","Path Alias Standards: TypeScript path mapping for cleaner imports","ng-zorro Component Standards: Comprehensive component library usage","Performance Standards: Specific benchmarks and optimization targets","Security Standards: Input validation and safe navigation","Data Model Standards: Interface-based with separate request/response types","Mock Data Standards: Complete CRUD operations with realistic relationships","Internationalization Standards: i18n pipe with namespace organization","Git Workflow Standards: Angular commit convention with structured messages"]}
{"type":"entity","name":"ng-alain Testing Standards","entityType":"Standard","observations":["Test Coverage Requirements: Services 80%, Components 60%, Guards 100%","Unit Test Template: AAA pattern with proper mocking","Component Test Template: TestBed configuration with spy objects","Guard Test Template: Functional guard testing with permission validation","E2E Test Template: Protractor integration with data-testid attributes","Mock Data Test Template: Service mocking with realistic data","Performance Test Template: Rendering efficiency with performance thresholds","Test Data Attributes: data-testid for E2E test selectors","Test Environment Setup: Zone.js testing configuration","Coverage Configuration: Karma with HTML, text-summary, and lcov reporters"]}
{"type":"entity","name":"ng-alain Documentation Standards","entityType":"Standard","observations":["Module README Template: Feature module documentation with directory structure","JSDoc Standards: Comprehensive API documentation with examples","Component Documentation Template: Usage, properties, events, and examples","Git Commit Standards: Angular commit convention with type, scope, and subject","API Documentation Standards: Service documentation with parameters and returns","Interface Documentation Standards: Type definitions with field descriptions","Style Guide Documentation: BEM methodology with Less variables","Architecture Documentation: System overview with Mermaid diagrams","Deployment Documentation: Build process and deployment steps","Update Procedures Documentation: Dependency and Angular update procedures","Code Review Checklist Documentation: Comprehensive review criteria"]}
{"type":"entity","name":"ng-alain Design Decisions","entityType":"Decision","observations":["Project Positioning: Angular 20 + ng-zorro-antd + @delon enterprise admin panel","Core Technology Stack: Latest stable versions with modern Angular features","State Management Approach: Service + RxJS instead of NgRx for simplicity","Routing Strategy: Hash Routing + Lazy Loading for simplified deployment","Styling Approach: Less preprocessor with ng-zorro-antd theming","Permission System: Hierarchical levels (Owner → Admin → Member → Viewer)","Performance Benchmarks: Specific targets for bundle size and load times","Development Commands: Standardized npm scripts for common operations","Path Alias System: TypeScript path mapping for cleaner imports","Component Library Usage: Comprehensive ng-zorro-antd component categories","Internationalization Strategy: i18n pipe with namespace organization","Mock Data Strategy: Mock-first development with complete CRUD operations","Dependency Management: Lock major versions with regular updates"]}
{"type":"relation","from":"VAN Mode System","to":"VAN File Verification System","relationType":"INCLUDES"}
{"type":"relation","from":"VAN Mode System","to":"VAN Platform Detection System","relationType":"INCLUDES"}
{"type":"relation","from":"VAN Mode System","to":"VAN Complexity Determination System","relationType":"INCLUDES"}
{"type":"relation","from":"ng-alain Project","to":"Memory Bank Optimization System","relationType":"USES"}
{"type":"relation","from":"Memory Bank Optimization System","to":"VAN Mode System","relationType":"MANAGES"}
{"type":"relation","from":"ng-alain Project","to":"Angular Architecture Decisions","relationType":"IMPLEMENTS"}
{"type":"relation","from":"ng-alain Project","to":"ng-alain Development Patterns","relationType":"USES"}
{"type":"relation","from":"Angular Architecture Decisions","to":"ng-alain Development Patterns","relationType":"GUIDES"}
{"type":"relation","from":"ng-alain Project","to":"ng-alain Code Standards","relationType":"FOLLOWS"}
{"type":"relation","from":"ng-alain Project","to":"ng-alain Testing Standards","relationType":"FOLLOWS"}
{"type":"relation","from":"ng-alain Project","to":"ng-alain Documentation Standards","relationType":"FOLLOWS"}
{"type":"relation","from":"ng-alain Project","to":"ng-alain Design Decisions","relationType":"IMPLEMENTS"}
{"type":"relation","from":"ng-alain Design Decisions","to":"ng-alain Code Standards","relationType":"GUIDES"}
{"type":"relation","from":"ng-alain Design Decisions","to":"ng-alain Testing Standards","relationType":"GUIDES"}
{"type":"relation","from":"ng-alain Design Decisions","to":"ng-alain Documentation Standards","relationType":"GUIDES"}
{"type":"entity","name":"VAN Initialization Complete","entityType":"Event","observations":["VAN mode initialization successfully completed","Platform detection confirmed Windows PowerShell environment","File verification validated Memory Bank structure with 47 files","System verification confirmed all core directories exist","Status updates completed for all components","Memory Bank ready for development tasks","All templates and documentation completed","System health indicators all green"]}
{"type":"relation","from":"VAN Mode System","to":"VAN Initialization Complete","relationType":"ACHIEVED"}
