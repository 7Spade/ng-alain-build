#!/usr/bin/env node

/**
 * ng-alain 專案結構樹狀圖生成腳本（精簡版）
 * 生成兩份文件 + Lint 報告：
 * 1. ng-alain-structure-folders.md - 只有資料夾結構
 * 2. ng-alain-structure-full.md - 完整結構（含文件）
 * 3. ng-alain-lint-error.md - ESLint + Stylelint 報告
 * 4. ng-alain-lint-error-style.md - Stylelint 獨立報告
 */

import { execSync } from 'node:child_process';
import * as fs from 'node:fs';
import * as path from 'node:path';

// ============================================================
// 類型定義
// ============================================================

interface LintResult {
  success: boolean;
  output: string;
  errors: string;
}

interface ProjectStats {
  files: number;
  folders: number;
}

interface TreeResult {
  tree: string;
  stats: ProjectStats;
}

// ============================================================
// 常數定義
// ============================================================

const EXCLUDE_PATTERNS: readonly string[] = [
  'dist',
  '.angular',
  'node_modules',
  '.git',
  '.vscode',
  '.idea',
  'coverage',
  '__tests__',
  'e2e',
  '.eslintcache',
  '.stylelintcache',
  '*.log',
  '*.tmp',
  '.DS_Store',
  '.env*',
  '_cli-tpl',
  '.cursor',
  '.github',
  '.husky',
  '.yarn',
  'scripts'
] as const;

const EXCLUDE_EXTENSIONS: readonly string[] = ['.map', '.spec.ts', '.spec.js', '.log', '.tmp', '.swp', '.bak'] as const;

// ============================================================
// 核心工具函數
// ============================================================

function shouldExclude(filePath: string, fileName: string): boolean {
  for (const pattern of EXCLUDE_PATTERNS) {
    if (pattern.includes('*')) {
      const regex = new RegExp(pattern.replace(/\*/g, '.*'));
      if (regex.test(fileName)) return true;
    } else {
      if (fileName === pattern || filePath.split(path.sep).includes(pattern)) return true;
    }
  }
  return EXCLUDE_EXTENSIONS.includes(path.extname(fileName));
}

function generateTreeWithStats(dirPath: string, prefix = '', isLast = true, depth = 0, maxDepth = 10, foldersOnly = false): TreeResult {
  const stats: ProjectStats = { files: 0, folders: 0 };

  if (depth > maxDepth) {
    return { tree: `${prefix + (isLast ? '└── ' : '├── ')}...\n`, stats };
  }

  let result = '';
  let items: fs.Dirent[] = [];

  try {
    items = fs.readdirSync(dirPath, { withFileTypes: true }).filter((item: fs.Dirent) => {
      if (shouldExclude(path.join(dirPath, item.name), item.name)) return false;
      if (foldersOnly && !item.isDirectory()) return false;
      return true;
    });
  } catch {
    return { tree: result, stats };
  }

  items.sort((a: fs.Dirent, b: fs.Dirent) => {
    if (a.isDirectory() && !b.isDirectory()) return -1;
    if (!a.isDirectory() && b.isDirectory()) return 1;
    return a.name.localeCompare(b.name);
  });

  items.forEach((item: fs.Dirent, index: number) => {
    const isLastItem = index === items.length - 1;
    const currentPrefix = isLast ? '└── ' : '├── ';
    const nextPrefix = isLast ? '    ' : '│   ';

    result += `${prefix}${currentPrefix}${item.name}`;

    if (item.isDirectory()) {
      result += '/\n';
      stats.folders++;
      const subPath = path.join(dirPath, item.name);
      const subResult = generateTreeWithStats(subPath, prefix + nextPrefix, isLastItem, depth + 1, maxDepth, foldersOnly);
      result += subResult.tree;
      stats.files += subResult.stats.files;
      stats.folders += subResult.stats.folders;
    } else {
      result += '\n';
      stats.files++;
    }
  });

  return { tree: result, stats };
}

function generateMarkdown(tree: string, title: string, description: string, stats: ProjectStats): string {
  const timestamp = new Date().toISOString().split('T')[0];
  return `# ${title}

> ${description}

**生成時間**: ${timestamp}

## 📊 統計資訊

- **目錄總數**: ${stats.folders}
${stats.files > 0 ? `- **文件總數**: ${stats.files}` : ''}

## 📂 目錄結構

\`\`\`
${tree.trim()}
\`\`\`

---

*Generated by ng-alain Structure Generator (Optimized)*
`;
}

function generateLintMarkdown(tsResult: LintResult, styleResult: LintResult): string {
  const timestamp = new Date().toISOString().replace('T', ' ').substring(0, 19);
  const tsErrors = (tsResult.output.match(/✖ \d+ problem/g) || [])[0] || '無錯誤';
  const styleErrors = (styleResult.output.match(/✖ \d+ problem/g) || [])[0] || '無錯誤';

  return `# 📋 ng-alain Lint 錯誤報告

> 自動生成的程式碼品質檢查報告

**生成時間**: ${timestamp}

## 📊 檢查摘要

| 檢查類型 | 狀態 | 結果 |
|---------|------|------|
| TypeScript (ESLint) | ${tsResult.success ? '✅ 通過' : '❌ 發現問題'} | ${tsErrors} |
| Style (Stylelint) | ${styleResult.success ? '✅ 通過' : '❌ 發現問題'} | ${styleErrors} |

## 🔍 詳細報告

### TypeScript Lint (ESLint)

${tsResult.success ? '✅ **無錯誤** - 程式碼符合 ESLint 規範' : ''}

\`\`\`
${tsResult.output.trim() || '(無輸出)'}
\`\`\`

### Style Lint (Stylelint)

${styleResult.success ? '✅ **無錯誤** - 樣式檔案符合 Stylelint 規範' : ''}

\`\`\`
${styleResult.output.trim() || '(無輸出)'}
\`\`\`

## 💡 建議修復步驟

### 自動修復
\`\`\`bash
# 自動修復 TypeScript 問題
yarn lint:ts

# 自動修復 Style 問題
yarn lint:style
\`\`\`

### 手動檢查
如果自動修復無法解決所有問題，請：
1. 檢查上述詳細報告中的錯誤訊息
2. 根據 ESLint/Stylelint 規則進行手動修正
3. 參考 Memory Bank 中的程式碼規範文件

## 📚 相關文件

- [程式碼規範](./implementation/code/codeStandards.md)
- [ESLint 配置](../eslint.config.mjs)
- [Stylelint 配置](../stylelint.config.mjs)

---

*Generated by ng-alain Structure Generator - Lint Report Module*
`;
}

function generateStyleLintMarkdown(styleResult: LintResult): string {
  const timestamp = new Date().toISOString().replace('T', ' ').substring(0, 19);
  const styleErrors = (styleResult.output.match(/✖ \d+ problem/g) || [])[0] || '無錯誤';

  return `# 🎨 ng-alain Style Lint 錯誤報告

> 自動生成的樣式檔案品質檢查報告（Stylelint）

**生成時間**: ${timestamp}

## 📊 檢查摘要

| 檢查類型 | 狀態 | 結果 |
|---------|------|------|
| Style (Stylelint) | ${styleResult.success ? '✅ 通過' : '❌ 發現問題'} | ${styleErrors} |

## 🔍 詳細報告

### Stylelint 檢查結果

${styleResult.success ? '✅ **無錯誤** - 所有樣式檔案符合 Stylelint 規範' : ''}

\`\`\`
${styleResult.output.trim() || '(無輸出)'}
\`\`\`

## 💡 建議修復步驟

### 自動修復
\`\`\`bash
# 自動修復 Style 問題
yarn lint:style
\`\`\`

### 手動檢查
如果自動修復無法解決所有問題，請：
1. 檢查上述詳細報告中的錯誤訊息
2. 根據 Stylelint 規則進行手動修正
3. 參考 Memory Bank 中的程式碼規範文件

## 📚 相關文件

- [程式碼規範](./implementation/code/codeStandards.md)
- [Stylelint 配置](../stylelint.config.mjs)

---

*Generated by ng-alain Structure Generator - Style Lint Report Module*
`;
}

function runLintAndSaveReport(): void {
  const outputPath = path.join(process.cwd(), 'memory-bank', 'ng-alain-lint-error.md');

  console.log('🔍 開始執行 Lint 檢查...\n');

  // 執行 TypeScript Lint
  console.log('📝 執行 TypeScript Lint (ESLint)...');
  const tsResult: LintResult = { success: true, output: '', errors: '' };
  try {
    tsResult.output = execSync('yarn eslint --cache', { encoding: 'utf8', stdio: 'pipe' });
  } catch (error: unknown) {
    tsResult.success = false;
    const err = error as { stdout?: string; stderr?: string };
    tsResult.output = (err.stdout || '') + (err.stderr || '');
  }

  // 執行 Style Lint
  console.log('🎨 執行 Style Lint (Stylelint)...');
  const styleResult: LintResult = { success: true, output: '', errors: '' };
  try {
    styleResult.output = execSync("yarn stylelint 'src/**/*.less'", { encoding: 'utf8', stdio: 'pipe' });
  } catch (error: unknown) {
    styleResult.success = false;
    const err = error as { stdout?: string; stderr?: string };
    styleResult.output = (err.stdout || '') + (err.stderr || '');
  }

  // 生成並寫入合併報告
  const report = generateLintMarkdown(tsResult, styleResult);
  fs.writeFileSync(outputPath, report, 'utf8');

  console.log(`✅ Lint 報告已生成: ${outputPath}`);
  console.log(tsResult.success && styleResult.success ? '   ✨ 所有檢查通過！' : '   ⚠️  發現問題，請查看報告詳情');
  console.log('');

  // 生成並寫入獨立的 Style Lint 報告
  const styleOutputPath = path.join(process.cwd(), 'memory-bank', 'ng-alain-lint-error-style.md');
  const styleReport = generateStyleLintMarkdown(styleResult);
  fs.writeFileSync(styleOutputPath, styleReport, 'utf8');

  console.log(`✅ Style Lint 獨立報告已生成: ${styleOutputPath}`);
  console.log(styleResult.success ? '   ✨ Style 檢查通過！' : '   ⚠️  發現樣式問題，請查看報告詳情');
  console.log('');
}

function generateProjectStructure(): void {
  const rootPath = process.cwd();
  const outputDir = path.join(rootPath, 'memory-bank');

  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  console.log('🔍 開始生成專案結構與 Lint 報告...\n');

  // 1. 執行 Lint 檢查
  runLintAndSaveReport();

  // 2. 生成資料夾結構（只有目錄）
  console.log('📁 生成資料夾結構...');
  const folderResult = generateTreeWithStats(rootPath, '', true, 0, 10, true);
  const folderContent = generateMarkdown(folderResult.tree, '📁 ng-alain 專案資料夾結構', '僅包含目錄結構，不包含文件', folderResult.stats);
  fs.writeFileSync(path.join(outputDir, 'ng-alain-structure-folders.md'), folderContent, 'utf8');
  console.log(`✅ 資料夾結構已生成\n   📊 目錄總數: ${folderResult.stats.folders}\n`);

  // 3. 生成完整結構（包含文件）
  console.log('📄 生成完整結構...');
  const fullResult = generateTreeWithStats(rootPath, '', true, 0, 10, false);
  const fullContent = generateMarkdown(fullResult.tree, '📄 ng-alain 專案完整結構', '包含完整的目錄和文件結構', fullResult.stats);
  fs.writeFileSync(path.join(outputDir, 'ng-alain-structure-full.md'), fullContent, 'utf8');
  console.log(`✅ 完整結構已生成\n   📊 目錄總數: ${fullResult.stats.folders}\n   📊 文件總數: ${fullResult.stats.files}\n`);

  console.log('🎉 專案結構與 Lint 報告生成完成！');
}

// ============================================================
// 執行腳本
// ============================================================

if (require.main === module) {
  try {
    generateProjectStructure();
  } catch (error) {
    console.error('❌ 生成專案結構時發生錯誤:', (error as Error).message);
    process.exit(1);
  }
}

export { generateProjectStructure, generateTreeWithStats };
