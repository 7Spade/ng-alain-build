---
alwaysApply: true
server: memory
summary: 高價值知識管理：實體-關係圖譜，自動同步 memory.json
---

[🏠 INDEX](./rules/INDEX.mdc) | Angular-CLI · Context7 · Filesystem · Fetch · GitHub · SeqThinking · Playwright · Memory · Everything

# Memory MCP

## 核心原則
✅ 只存**高價值、可重用**的知識  
❌ **嚴禁儲存** secrets、密碼、token  
🔄 自動同步至 `memory-bank/memory.json`

## 知識圖譜結構
```json
{
  "entities": [
    {
      "name": "實體名稱",
      "type": "實體類型",
      "observations": ["觀測1", "觀測2"]
    }
  ],
  "relations": [
    {
      "from": "實體A",
      "to": "實體B", 
      "type": "關係類型"
    }
  ]
}
```

## 可用工具
- `create_entities` - 建立多個實體
- `add_observations` - 新增觀測到現有實體
- `create_relations` - 建立實體間關係
- `delete_entities` - 刪除實體
- `delete_observations` - 刪除觀測
- `delete_relations` - 刪除關係
- `read_graph` - 讀取完整知識圖譜
- `search_nodes` - 搜尋節點
- `open_nodes` - 開啟特定節點

## 自動同步觸發時機

| 事件 | 觸發器 | 操作 |
|------|--------|------|
| **決策完成** | Sequential Thinking 結束 | `add_observations` |
| **文件引用** | Context7 成功查詢 | `add_observations` |
| **檔案編輯** | Filesystem 寫入成功 | `add_observations` |
| **Git 操作** | GitHub PR/Issue 建立 | `create_entities` + `create_relations` |

## 實作原則
1️⃣ **單事件單觀測** - 一次只寫一個，避免干擾  
2️⃣ **實體為中心** - 優先更新現有實體  
3️⃣ **最小關聯** - 只建立必要的關係

## 使用範例

### 記錄設計決策
```typescript
add_observations({
  observations: [{
    entityName: "ng-alain專案",
    contents: [
      "決定使用 ng-zorro-antd Table 元件實現列表",
      "選擇 @delon/abc STComponent 處理複雜表格邏輯"
    ]
  }]
})
```

### 建立專案實體
```typescript
create_entities({
  entities: [{
    name: "使用者管理模組",
    entityType: "功能模組",
    observations: [
      "使用 @delon/auth 處理認證",
      "使用 @delon/acl 處理權限控制"
    ]
  }]
})
```

## 自動核准
✅ read_graph

## ⚠️ 注意事項
- 敏感資訊改用 placeholder + 環境變數
- 觀測內容應簡潔，避免冗長描述
- 定期檢查 memory.json 一致性

---

Memory 檔案：`memory-bank/memory.json` | 環境變數：`MEMORY_FILE_PATH`
